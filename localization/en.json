{
  "loc_title": "x86 instruction sim project - Bruno Talaga",
  "loc_head2": "Basic x86 instruction simulator - Bruno Talaga",
  "loc_manual": "Manual",
  "loc_manual_head2": "Manual",
  "loc_manual_head4": "Welcome to a basic x86 instruction simulator! You can find a description of the program's functionality below:",
  "loc_repository": "Repository link",
  "loc_documentation": "Project write-up link (Only in Polish)",
  "loc_values_table": "Variable table:",
  "loc_stack": "Stack",
  "loc_pointer": "Pointer",
  "loc_commands": "Command section",
  "loc_operation_log": "Operation log",
  "loc_memory_mode": "Memory addressing mode",
  "loc_indexed": "Indexed",
  "loc_based": "Based",
  "loc_based_indexed": "Based-Indexed",
  "loc_select_memory_mode": "Select an addressation mode",
  "loc_memory": "Memory",
  "loc_mov_strong": "MOV - moves a value from one variable to the second",
  "loc_mov_args_line1": "Requires two arguments to be passed: MOV ARG1, ARG2",
  "loc_mov_args_line2": "ARG1 - variable that will get the value assigned to it",
  "loc_mov_args_line3": "Types allowed: REGISTER, VALUE (HEX), MEMORY ADDRESS",
  "loc_mov_args_line4": "ARG2 - source variable, its value will be assigned to the first arg",
  "loc_mov_args_line5": "Types allowed: REGISTER, VALUE (HEX), MEMORY ADDRESS",
  "loc_xchg_strong": "XCHG - swaps the values of two variables",
  "loc_xchg_args_line1": "Requires two arguments to be passed: XCHG ARG1, ARG2",
  "loc_xchg_args_line2": "ARG1 - variable that will receive the value of the second argument",
  "loc_xchg_args_line3": "Types allowed: REGISTER, MEMORY ADDRESS",
  "loc_xchg_args_line4": "ARG2 - variable that will receive the value of the first argument",
  "loc_xchg_args_line5": "Types allowed: REGISTER, MEMORY ADDRESS",
  "loc_push_strong": "PUSH - pushes the value of the variable onto the stack",
  "loc_push_args_line1": "Requires one argument to be passed: PUSH ARG1",
  "loc_push_args_line2": "ARG1 - variable that will have its value pushed onto the stack",
  "loc_push_args_line3": "Types allowed: REGISTER",
  "loc_pop_strong": "POP - pops the value off the stack and assigns it to a variable",
  "loc_pop_args_line1": "Requires one argument to be passed: POP ARG1",
  "loc_pop_args_line2": "ARG1 - variable that will receive the value off the stack",
  "loc_pop_args_line3": "Types allowed: REGISTER",
  "loc_arg_types_head4": "Types in the argument field:",
  "loc_register_strong": "REGISTER",
  "loc_letter_case_matters": "Letter case matters",
  "loc_hex_value_strong": "VALUE (HEX)",
  "loc_value_desc": "Value must be written as a hex number and has to be exactly 4 characters long, for example: 0000, 0001, 00FF",
  "loc_letter_case_doesnt_matter": "Letter case doesn't matter",
  "loc_memory_address_strong": "MEMORY ADDRESS",
  "loc_address_calc_info_line1": "The program allows for calculating the memory address using hex values and the \"+\" operator",
  "loc_address_calc_info_line2": "e.g. [0002 + 0002 + 0002] = memory address 0006",
  "loc_address_calc_info_line3": "Mixing registers and hex values during calculations is allowed",
  "loc_address_calc_info_line4": "e.g. [SI + 0002 + BP] = memory address will be calculated from the value of the SI register, 0002 value and the value of the BP register"
}
